#BlueJ class context
comment0.target=LinkedList
comment0.text=\r\n\ The\ class\ LinkedList\ creates\ a\ doubly\ linked\ list.\ It\ has\ methods\ to\ add\ new\ elements,\ and\ search\ for\ or\ remove\ elements\ by\ postition,\r\n\ and\ move\ certain\ elements\ up\ or\ down\ in\ the\ list.\r\n\r\n\ @author\ \ Valerie\ Foster\r\n\ @version\ 2/13/2018\r\n
comment1.params=
comment1.target=LinkedList()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ LinkedList\r\n
comment10.params=value
comment10.target=boolean\ moveDown(java.lang.Object)
comment10.text=\r\n\ This\ method\ takes\ in\ a\ value\ of\ type\ E\ and\ if\ it\ finds\ the\ value\ from\ the\ beginning\ of\ the\ list\ to\ the\ second\ from\ the\ bottom,\r\n\ it\ returns\ true\ and\ moves\ the\ value\ down,\ otherwise\ it\ returns\ false\ an\ does\ nothing\r\n\r\n\ @param\ \ \ value\ \ \ a\ given\ value\ of\ type\ E\ to\ move\ down\ in\ the\ list\r\n\ @return\ \ \ \ \ \ \ \ \ \ a\ boolean\ variable\ that\ expresses\ whether\ the\ given\ value\ was\ moved\ down\ or\ not\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ \r\n\ Creates\ and\ returns\ a\ string\ representation\ of\ this\ LinkedList\r\n\ \r\n\ @return\ \ a\ String\ showing\ basic\ information\ about\ the\ linked\ list\r\n
comment2.params=
comment2.target=void\ clear()
comment2.text=\r\n\ This\ method\ clears\ the\ list\ and\ makes\ it\ empty\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ This\ method\ returns\ the\ number\ of\ elements\ in\ the\ list\r\n\r\n\ @return\ \ \ \ the\ count\ of\ the\ list\r\n
comment4.params=ind
comment4.target=java.lang.Object\ getElement(int)
comment4.text=\r\n\ This\ method\ loops\ through\ the\ list\ to\ find\ the\ element\ at\ the\ given\ index\r\n\r\n\ @param\ \ \ ind\ \ \ \ \ the\ index\ of\ the\ element\ to\ return\r\n\ @throws\ \ \ \ \ \ \ \ \ \ IllegalArgumentException\ if\ the\ given\ index\ is\ invalid\r\n\ @return\ \ \ \ \ \ \ \ \ \ the\ element\ of\ type\ E\ found\ at\ the\ given\ index\r\n
comment5.params=value
comment5.target=void\ addAtFront(java.lang.Object)
comment5.text=\r\n\ This\ method\ adds\ a\ given\ value\ at\ the\ front\ of\ the\ list,\ has\ differnt\ cases\ if\ it\ is\ the\ first\ element\ in\ the\ list\ or\ not\r\n\r\n\ @param\ \ \ value\ \ \ a\ given\ value\ of\ type\ E\ to\ add\ to\ the\ list\r\n
comment6.params=value
comment6.target=void\ addAtEnd(java.lang.Object)
comment6.text=\r\n\ This\ method\ adds\ a\ given\ value\ at\ the\ end\ of\ the\ list,\ has\ differnt\ cases\ if\ it\ is\ the\ first\ element\ in\ the\ list\ or\ not\r\n\r\n\ @param\ \ \ value\ \ \ a\ given\ value\ of\ type\ E\ to\ add\ to\ the\ list\r\n
comment7.params=ind\ value
comment7.target=void\ addAtPos(int,\ java.lang.Object)
comment7.text=\r\n\ This\ method\ adds\ a\ given\ value\ to\ the\ list\ at\ the\ given\ index,\ uses\ addAtFront\ or\ addAtEnd\ if\ the\ index\ specified\ is\ a\ the\ front\ or\ the\ end\r\n\r\n\ @param\ \ \ ind\ \ \ \ \ the\ index\ of\ the\ element\ to\ add\r\n\ @param\ \ \ value\ \ \ a\ given\ value\ of\ type\ E\ to\ add\ to\ the\ list\r\n\ @throws\ \ \ \ \ \ \ \ \ \ IllegalArgumentException\ if\ the\ given\ index\ is\ invalid\r\n
comment8.params=ind
comment8.target=void\ remove(int)
comment8.text=\r\n\ This\ method\ removes\ an\ element\ at\ the\ given\ index,\ has\ differnt\ cases\ if\ the\ element\ is\ the\ only\ element\ in\ the\ list,\r\n\ or\ if\ it\ is\ at\ the\ front,\ at\ the\ end,\ or\ somewhere\ in\ the\ middle\ of\ the\ list\r\n\r\n\ @param\ \ \ ind\ \ \ \ \ the\ index\ of\ the\ element\ to\ remove\r\n\ @throws\ \ \ \ \ \ \ \ \ \ IllegalArgumentException\ if\ the\ given\ index\ is\ invalid\ \ \r\n
comment9.params=value
comment9.target=boolean\ moveUp(java.lang.Object)
comment9.text=\r\n\ This\ method\ takes\ in\ a\ value\ of\ type\ E\ and\ if\ it\ finds\ the\ value\ from\ the\ second\ in\ the\ list\ down\ to\ the\ end,\r\n\ it\ returns\ true\ and\ moves\ the\ value\ up,\ otherwise\ it\ returns\ false\ an\ does\ nothing\r\n\r\n\ @param\ \ \ value\ \ \ a\ given\ value\ of\ type\ E\ to\ move\ up\ in\ the\ list\r\n\ @return\ \ \ \ \ \ \ \ \ \ a\ boolean\ variable\ that\ expresses\ whether\ the\ given\ value\ was\ moved\ up\ or\ not\r\n
numComments=12
